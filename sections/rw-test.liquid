{%- assign sec_id = '#shopify-section-' | append: section.id -%}
{%- assign parts = sec_id | split: '_' -%}
{%- assign last_lower = parts | last -%}
{%- assign last_part = last_lower | downcase -%}

<style>
  {{ sec_id }} .pc-financial-score-{{ last_part }} {
    position: relative;
    width: 100%;
    overflow: hidden;
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 10px;
  }
  
  {{ sec_id }} .pc-card-{{ last_part }} {
    display: flex;
    align-items: center;
    width: 100%;
    max-width: 25em;
  }
  
  {{ sec_id }} .pc-card-surface-{{ last_part }} {
    animation: pc-fade-in-{{ last_part }} 1s cubic-bezier(0.33, 1, 0.68, 1);
    background: var(--pc-white);
    border-radius: 1em;
    box-shadow: 0 0.25em 0.625em hsla(0, 0%, 0%, 0.05);
    min-width: 0;
    transition: background-color 0.3s;
  }
  
  {{ sec_id }} .pc-card-header-{{ last_part }},
  {{ sec_id }} .pc-card-badge-{{ last_part }},
  {{ sec_id }} .pc-card-graph-container-{{ last_part }},
  {{ sec_id }} .pc-card-description-{{ last_part }},
  {{ sec_id }} .pc-card-score-button-{{ last_part }} {
    animation: pc-fade-slide-up-{{ last_part }} 0.8s cubic-bezier(0.33, 1, 0.68, 1) forwards;
    opacity: 0;
  }
  
  {{ sec_id }} .pc-card-header-{{ last_part }} {
    display: flex;
    gap: 1.5em;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2.5em;
  }
  
  {{ sec_id }} .pc-card-title-{{ last_part }} {
    font-size: 1.375em;
    font-weight: 500;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  {{ sec_id }} .pc-card-badge-{{ last_part }} {
    animation-delay: 0.8s;
    border-radius: 0.25rem;
    flex-shrink: 0;
    font-size: 0.75em;
    font-weight: 600;
    line-height: 2;
    opacity: 0;
    padding: 0.25rem 0.625rem;
    text-transform: uppercase;
    transform: translateY(67%);
    transition: background-color 0.3s, color 0.3s;
  }
  
  {{ sec_id }} .pc-card-badge-weak-{{ last_part }} {
    background-color: var(--pc-danger100);
    color: var(--pc-danger700);
  }
  
  {{ sec_id }} .pc-card-badge-moderate-{{ last_part }} {
    background-color: var(--pc-warning100);
    color: var(--pc-warning700);
  }
  
  {{ sec_id }} .pc-card-badge-strong-{{ last_part }} {
    background-color: var(--pc-success100);
    color: var(--pc-success700);
  }
  
  {{ sec_id }} .pc-card-graph-container-{{ last_part }} {
    animation-delay: 0.1s;
    position: relative;
    margin-bottom: 2em;
  }
  
  {{ sec_id }} .pc-card-half-circle-{{ last_part }} {
    display: block;
    margin: auto;
    width: auto;
    max-width: 100%;
    height: 8.5em;
  }
  
  {{ sec_id }} .pc-card-half-circle-track-{{ last_part }} {
    stroke: var(--pc-gray50);
    transition: stroke 0.3s;
  }
  
  {{ sec_id }} .pc-card-description-{{ last_part }} {
    animation-delay: 0.2s;
    color: var(--pc-gray600);
    margin-bottom: 2.25em;
    min-height: 4.5em;
    text-align: center;
    transition: color 0.3s;
  }
  
  {{ sec_id }} .pc-card-score-{{ last_part }} {
    font-size: 2.5em;
    font-weight: 500;
    height: 3.75rem;
    overflow: hidden;
    position: relative;
  }
  
  {{ sec_id }} .pc-card-score-digit-{{ last_part }} {
    display: inline-block;
  }
  
  {{ sec_id }} .pc-card-score-digits-{{ last_part }} {
    position: absolute;
    inset: 0;
  }
  
  {{ sec_id }} .pc-card-score-digits-dimmed-{{ last_part }} {
    color: var(--pc-gray400);
  }
  
  {{ sec_id }} .pc-card-score-digits-{{ last_part }} + .pc-card-score-digits-{{ last_part }} {
    transform: translateY(100%);
  }
  
  {{ sec_id }} .pc-card-score-animated-{{ last_part }} .pc-card-score-digit-{{ last_part }} {
    animation: pc-slide-to-top-{{ last_part }} 0.8s 0.4s cubic-bezier(0.65, 0, 0.35, 1) forwards;
  }
  
  {{ sec_id }} .pc-card-score-display-{{ last_part }} {
    position: absolute;
    bottom: 0;
    width: 100%;
    text-align: center;
  }
  
  {{ sec_id }} .pc-card-score-label-{{ last_part }} {
    color: var(--pc-gray700);
    text-transform: uppercase;
    transition: color 0.3s;
  }
  
  {{ sec_id }} .pc-card-score-button-{{ last_part }} {
    animation-delay: 0.3s;
    background-color: var(--pc-primary500);
    border: 2px solid var(--pc-primary500);
    border-radius: 0.5rem;
    box-shadow: 0 0 0 3px transparent;
    color: var(--pc-white);
    cursor: pointer;
    font-size: 1.25em;
    outline: transparent;
    padding: 0.625rem 0.75rem;
    width: 100%;
    transition: background-color 0.3s, border-color 0.3s, box-shadow 0.3s, color 0.3s;
  }
  
  {{ sec_id }} .pc-card-score-button-outlined-{{ last_part }} {
    background: transparent;
    border: 2px solid var(--pc-gray100);
    color: var(--pc-gray900);
  }
  
  {{ sec_id }} .pc-card-container-{{ last_part }} {
    overflow: hidden;
  }
  
  {{ sec_id }} .pc-card-content-{{ last_part }} {
    padding: 2.25em;
  }
  
  @keyframes pc-fade-in-{{ last_part }} {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes pc-fade-slide-up-{{ last_part }} {
    from {
      opacity: 0;
      transform: translateY(3em);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes pc-slide-to-top-{{ last_part }} {
    from { transform: translateY(0); }
    to { transform: translateY(-100%); }
  }
</style>

<div class="pc-financial-score-{{ last_part }}">
  {% for block in section.blocks %}
    {% assign score = block.settings.initial_score | default: nil %}
{% assign max_score = 100 %}
{% assign has_score = false %}
{% if score != blank %}
  {% assign has_score = true %}
{% endif %}

    
    {% if has_score %}
      {% assign score_value = score | times: 1 %}
      {% if score_value >= 80 %}
        {% assign strength = 'strong' %}
      {% elsif score_value >= 40 %}
        {% assign strength = 'moderate' %}
      {% else %}
        {% assign strength = 'weak' %}
      {% endif %}
    {% else %}
      {% assign strength = 'none' %}
    {% endif %}
    
    <div class="pc-card-{{ last_part }}" data-has-score="{{ has_score }}" data-initial-score="{{ score_value | default: 0 }}" data-block-id="{{ block.id }}">
      <div class="pc-card-surface-{{ last_part }}">
        <div class="pc-card-container-{{ last_part }}">
          <div class="pc-card-content-{{ last_part }}">
            <div class="pc-card-header-{{ last_part }}">
              <h2 class="pc-card-title-{{ last_part }}">{{ block.settings.title }}</h2>
              {% if strength != 'none' %}
                <span class="pc-card-badge-{{ last_part }} pc-card-badge-{{ strength }}-{{ last_part }}">{{ strength }}</span>
              {% endif %}
            </div>
            
            <div class="pc-card-graph-container-{{ last_part }}">
              <svg class="pc-card-half-circle-{{ last_part }}" viewBox="0 0 100 50" aria-hidden="true">
                <defs>
                  <linearGradient id="grad-{{ last_part }}-{{ forloop.index }}" x1="0" y1="0" x2="1" y2="0">
                    {% if strength == 'none' %}
                      <stop offset="0%" stop-color="var(--pc-gray50)" />
                      <stop offset="100%" stop-color="var(--pc-gray400)" />
                    {% elsif strength == 'weak' %}
                      <stop offset="0%" stop-color="var(--pc-danger200)" />
                      <stop offset="50%" stop-color="var(--pc-danger500)" />
                      <stop offset="100%" stop-color="var(--pc-danger700)" />
                    {% elsif strength == 'moderate' %}
                      <stop offset="0%" stop-color="var(--pc-warning200)" />
                      <stop offset="50%" stop-color="var(--pc-warning500)" />
                      <stop offset="100%" stop-color="var(--pc-warning600)" />
                    {% elsif strength == 'strong' %}
                      <stop offset="0%" stop-color="var(--pc-success200)" />
                      <stop offset="50%" stop-color="var(--pc-success500)" />
                      <stop offset="100%" stop-color="var(--pc-success700)" />
                    {% endif %}
                  </linearGradient>
                </defs>
                <g fill="none" stroke-width="10" transform="translate(50, 50.5)">
                  <circle class="pc-card-half-circle-track-{{ last_part }}" r="45" />
                  <circle stroke="url(#grad-{{ last_part }}-{{ forloop.index }})" 
                          stroke-dasharray="141.37 141.37" 
                          r="45" 
                          stroke-dashoffset="{% if has_score %}{{ score_value | times: -1.4137 }}{% else %}-35.3425{% endif %}" />
                </g>
              </svg>
              
              <div class="pc-card-score-display-{{ last_part }}">
                <div class="pc-card-score-{{ last_part }} {% if has_score %}pc-card-score-animated-{{ last_part }}{% endif %}">
                  <div class="pc-card-score-digits-{{ last_part }} pc-card-score-digits-dimmed-{{ last_part }}">
                    <div class="pc-card-score-digit-{{ last_part }}">0</div>
                  </div>
                  <div class="pc-card-score-digits-{{ last_part }}">
                    {% if has_score %}
                      {% assign digits = score | split: '' %}
                      {% for digit in digits %}
                        <span class="pc-card-score-digit-{{ last_part }}">{{ digit }}</span>
                      {% endfor %}
                    {% endif %}
                  </div>
                </div>
                <div class="pc-card-score-label-{{ last_part }}">
                  {% if has_score %}out of {{ max_score }}{% else %}No score{% endif %}
                </div>
              </div>
            </div>
            
            <p class="pc-card-description-{{ last_part }}">{{ block.settings.description }}</p>
            
            <button class="pc-card-score-button-{{ last_part }} {% if has_score %}pc-card-score-button-outlined-{{ last_part }}{% endif %}" 
                    type="button" 
                    data-button-link="{{ block.settings.button_link | default: '#' }}">
              {% if has_score %}Learn more{% else %}Calculate your score{% endif %}
            </button>
          </div>
        </div>
      </div>
    </div>
  {% endfor %}
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const cards = document.querySelectorAll('{{ sec_id }} .pc-card-{{ last_part }}');
    
    // Initialize animations
    cards.forEach((card, index) => {
      setTimeout(() => {
        const container = card.querySelector('.pc-card-container-{{ last_part }}');
        if (container) {
          container.style.height = container.scrollHeight + 'px';
        }
      }, 300 + (index * 200));
    });

    // Handle button clicks
    document.querySelectorAll('{{ sec_id }} .pc-card-score-button-{{ last_part }}').forEach(button => {
      button.addEventListener('click', function() {
        const card = this.closest('.pc-card-{{ last_part }}');
        const hasScore = card.dataset.hasScore === 'true';
        const buttonLink = this.dataset.buttonLink;

        if (hasScore && buttonLink) {
          window.location.href = buttonLink;
        } else {
          // Generate random score
          const initialScore = parseInt(card.dataset.initialScore) || 0;
          const randomScore = Math.floor(Math.random() * 100) + 1;
          
          // Update the score display
          const digitsContainer = card.querySelector('.pc-card-score-digits-{{ last_part }}:last-child');
          digitsContainer.innerHTML = '';
          
          String(randomScore).split('').forEach(digit => {
            digitsContainer.innerHTML += `<span class="pc-card-score-digit-{{ last_part }}">${digit}</span>`;
          });

          // Update the badge
          const badgeContainer = card.querySelector('.pc-card-badge-{{ last_part }}');
          if (badgeContainer) {
            let strength = 'none';
            if (randomScore >= 80) strength = 'strong';
            else if (randomScore >= 40) strength = 'moderate';
            else strength = 'weak';
            
            badgeContainer.className = `pc-card-badge-{{ last_part }} pc-card-badge-${strength}-{{ last_part }}`;
            badgeContainer.textContent = strength;
          }

          // Update the button
          this.classList.add('pc-card-score-button-outlined-{{ last_part }}');
          this.textContent = 'Learn more';
          card.dataset.hasScore = 'true';
        }
      });
    });
  });
</script>

{% schema %}
{
  "name": "PWC-Score Cards #1",
  "settings": [
    {
      "type": "header",
      "content": "General Settings"
    },
    {
      "type": "range",
      "id": "max_score",
      "label": "Maximum Score Value",
      "min": 50,
      "max": 200,
      "step": 10,
      "default": 100,
      "unit": "pts"
    }
  ],
  "blocks": [
    {
      "type": "score_card",
      "name": "Score Card",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Financial Score"
        },
        {
          "type": "textarea",
          "id": "description",
          "label": "Description",
          "default": "This score measures your financial health. Higher score means better financial status."
        },
        {
          "type": "range",
          "id": "initial_score",
          "label": "Initial Score",
          "min": 0,
          "max": 100,
          "step": 1,
          "unit": "pts",
          "default": 0,
          "info": "Leave empty to show 'Calculate your score' button"
        },
        {
          "type": "url",
          "id": "button_link",
          "label": "Button Link",
          "info": "Link for 'Learn more' button"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "PWC-Score Cards #1",
      "category": "Custom",
   "blocks": [
  {
    "type": "score_card",
    "settings": {
      "title": "Protection Score",
      "description": "This score measures your overall security strength. Higher score means better protection.",
      "initial_score": 42
    }
  },
  {
    "type": "score_card",
    "settings": {
      "title": "Investment Score",
      "description": "This score measures portfolio alignment with your goals and strategy.",
      "initial_score": 83
    }
  },
  {
    "type": "score_card",
    "settings": {
      "title": "Financial Fitness",
      "description": "Boost financial control in 10 minutes. Get your fitness score.",
      "initial_score": 0
    }
  }
]

    }
  ]
}
{% endschema %}