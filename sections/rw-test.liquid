{%- assign sec_id = '#shopify-section-' | append: section.id -%}
{%- assign parts = sec_id | split: '_' -%}
{%- assign last_lower = parts | last -%}
{%- assign last_part = last_lower | downcase -%}

<style>
  /* Your existing CSS remains unchanged */
  {{ sec_id }} {
    --pc-bg-color-{{ last_part }}: {{ section.settings.bg_color }};
    --pc-card-width-{{ last_part }}: {{ section.settings.card_width }}px;
    --pc-card-height-{{ last_part }}: {{ section.settings.card_height }}px;
    --pc-black-{{ last_part }}: {{ section.settings.text_color }};
    --pc-white-{{ last_part }}: {{ section.settings.card_bg_color }};
    --pc-accent-{{ last_part }}: {{ section.settings.accent_color }};
    --pc-grid-color-{{ last_part }}: {{ section.settings.grid_color }};
    --pc-frame-color-{{ last_part }}: {{ section.settings.frame_color }};
  }

  /* All your existing CSS styles remain exactly the same */
  /* ... (all your CSS code) ... */

  /* Add a play/pause button for the auto-scroll */
  {{ sec_id }} .pc-carousel-autoplay-{{ last_part }} {
    position: absolute;
    top: 20px;
    right: 20px;
    background: transparent;
    border: 1px solid var(--pc-black-{{ last_part }});
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 0.7;
    transition: opacity 0.3s ease;
    z-index: 10;
  }

  {{ sec_id }} .pc-carousel-autoplay-{{ last_part }}:hover {
    opacity: 1;
  }

  {{ sec_id }} .pc-carousel-autoplay-{{ last_part }} svg {
    width: 18px;
    height: 18px;
    fill: var(--pc-black-{{ last_part }});
  }

  @media (max-width: 768px) {
    {{ sec_id }} .pc-carousel-autoplay-{{ last_part }} {
      top: 10px;
      right: 10px;
      width: 35px;
      height: 35px;
    }
  }
</style>

<pc-card-carousel-{{ last_part }} class="pc-card-carousel-{{ last_part }}">
  <div class="pc-carousel-{{ last_part }}">
    <!-- Add autoplay control button -->
    <button class="pc-carousel-autoplay-{{ last_part }}" aria-label="Pause carousel animation">
      <svg viewBox="0 0 24 24">
        <path d="M6 4h4v16H6zm8 0h4v16h-4z"/>
      </svg>
    </button>
    
    <div class="pc-carousel-track-{{ last_part }}">
      {%- for block in section.blocks -%}
        <article class="pc-deconstructed-card-{{ last_part }} {% if block.settings.card_type == 'text' %}pc-text-card-{{ last_part }}{% endif %}">
          <!-- Your card content remains unchanged -->
          {%- if block.settings.card_type == 'image' -%}
            <div class="pc-card-layer-{{ last_part }} pc-card-image-{{ last_part }}">
              {%- if block.settings.background_image != blank -%}
                {% assign image_class = 'pc-card-bg-image-' | append: last_part %}
                {{ 
                  block.settings.background_image 
                  | image_url: width: 600 
                  | image_tag: 
                      loading: 'lazy', 
                      class: image_class,
                      alt: block.settings.heading 
                }}
              {%- else -%}
                {{ 'product-1' | placeholder_svg_tag: 'pc-placeholder-svg' }}
              {%- endif -%}
            </div>
          {%- else -%}
            <div class="pc-card-layer-{{ last_part }} pc-card-background-{{ last_part }}">
              <div class="pc-bg-grid-{{ last_part }}">
                <div class="pc-grid-line-{{ last_part }} pc-horizontal-{{ last_part }}" style="top: 25%"></div>
                <div class="pc-grid-line-{{ last_part }} pc-horizontal-{{ last_part }}" style="top: 50%"></div>
                <div class="pc-grid-line-{{ last_part }} pc-horizontal-{{ last_part }}" style="top: 75%"></div>
                <div class="pc-grid-line-{{ last_part }} pc-vertical-{{ last_part }}" style="left: 33.33%"></div>
                <div class="pc-grid-line-{{ last_part }} pc-vertical-{{ last_part }}" style="left: 66.66%"></div>
              </div>
              <div class="pc-bg-objects-{{ last_part }}">
                <div class="pc-bg-object-{{ last_part }} pc-circle-{{ last_part }}"></div>
                <div class="pc-bg-object-{{ last_part }} pc-square-{{ last_part }}"></div>
                <div class="pc-bg-object-{{ last_part }} pc-triangle-{{ last_part }}"></div>
              </div>
            </div>
          {%- endif -%}
          
          <div class="pc-card-layer-{{ last_part }} pc-card-frame-{{ last_part }}">
            <svg viewBox="0 0 300 400" preserveAspectRatio="none">
              <path class="pc-frame-path-{{ last_part }}" d="M 20,20 H 280 V 380 H 20 Z" />
            </svg>
          </div>
          
          <div class="pc-card-layer-{{ last_part }} pc-card-content-{{ last_part }} {% if block.settings.content_alignment == 'right' %}pc-text-align-right-{{ last_part }}{% endif %}">
            <div class="pc-content-fragment-{{ last_part }} pc-fragment-heading-{{ last_part }}">
              <h2 class="pc-content-text-{{ last_part }} {% if block.settings.content_alignment == 'right' %}pc-align-right-{{ last_part }}{% endif %}">{{ block.settings.heading }}</h2>
              <h3 class="pc-content-subtext-{{ last_part }} {% if block.settings.content_alignment == 'right' %}pc-align-right-{{ last_part }}{% endif %}">{{ block.settings.subheading }}</h3>
            </div>
            
            <div class="pc-content-fragment-{{ last_part }} pc-fragment-meta-{{ last_part }} {% if block.settings.content_alignment == 'right' %}pc-text-align-right-{{ last_part }}{% endif %}">
              {% if block.settings.content_alignment != 'right' %}<div class="pc-meta-line-{{ last_part }}"></div>{% endif %}
              <span class="pc-meta-text-{{ last_part }}">{{ block.settings.category }}</span>
              {% if block.settings.content_alignment == 'right' %}<div class="pc-meta-line-{{ last_part }}"></div>{% endif %}
            </div>
            
            <div class="pc-content-fragment-{{ last_part }} pc-fragment-body-{{ last_part }} {% if block.settings.content_alignment == 'right' %}pc-text-align-right-{{ last_part }}{% endif %}">
              <p class="pc-content-text-{{ last_part }}">{{ block.settings.description }}</p>
            </div>
            
            <div class="pc-content-fragment-{{ last_part }} pc-fragment-cta-{{ last_part }} {% if block.settings.content_alignment == 'right' %}pc-text-align-right-{{ last_part }}{% endif %}">
              <a href="{{ block.settings.link_url }}" class="pc-cta-link-{{ last_part }}" target="{{ block.settings.link_target }}">
                <div class="pc-cta-box-{{ last_part }}"></div>
                <span class="pc-cta-text-{{ last_part }}">{{ block.settings.link_text }}</span>
              </a>
            </div>
          </div>
        </article>
      {%- endfor -%}
    </div>

    <div class="pc-carousel-controls-{{ last_part }}">
      <button class="pc-carousel-button-{{ last_part }} pc-prev-{{ last_part }}">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>
      <button class="pc-carousel-button-{{ last_part }} pc-next-{{ last_part }}">
        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
    </div>

    <div class="pc-dots-container-{{ last_part }}"></div>
  </div>
</pc-card-carousel-{{ last_part }}>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const sectionId = "{{ sec_id }}";
  const lastPart = "{{ last_part }}";
  
  const track = document.querySelector(`${sectionId} .pc-carousel-track-${lastPart}`);
  const cards = document.querySelectorAll(`${sectionId} .pc-deconstructed-card-${lastPart}`);
  const prevBtn = document.querySelector(`${sectionId} .pc-prev-${lastPart}`);
  const nextBtn = document.querySelector(`${sectionId} .pc-next-${lastPart}`);
  const dotsContainer = document.querySelector(`${sectionId} .pc-dots-container-${lastPart}`);
  const autoplayBtn = document.querySelector(`${sectionId} .pc-carousel-autoplay-${lastPart}`);

  if (!track || !cards.length) return;

  // Clone first and last cards for seamless looping
  const firstCardClone = cards[0].cloneNode(true);
  const lastCardClone = cards[cards.length - 1].cloneNode(true);
  
  track.appendChild(firstCardClone);
  track.insertBefore(lastCardClone, cards[0]);
  
  // Update cards reference after cloning
  const allCards = document.querySelectorAll(`${sectionId} .pc-deconstructed-card-${lastPart}`);
  const totalCards = allCards.length;
  
  // Set initial position to show the first actual card (not the clone)
  let currentIndex = 1;
  track.style.transform = `translateX(-${currentIndex * (allCards[0].offsetWidth + {{ section.settings.card_gap }})}px)`;

  // Create dots for the original cards only
  for (let i = 0; i < cards.length; i++) {
    const dot = document.createElement("div");
    dot.classList.add(`pc-dot-${lastPart}`);
    if (i === 0) dot.classList.add(`pc-active-${lastPart}`);
    dot.addEventListener("click", () => goToCard(i + 1)); // +1 because we added a clone at the beginning
    dotsContainer.appendChild(dot);
  }

  const dots = document.querySelectorAll(`${sectionId} .pc-dot-${lastPart}`);
  
  // Auto-play functionality
  let autoplayInterval;
  let autoplayDelay = {{ section.settings.autoplay_delay | default: 5000 }};
  let isAutoplayPaused = false;
  
  function startAutoplay() {
    clearInterval(autoplayInterval);
    autoplayInterval = setInterval(() => {
      if (!isAutoplayPaused) {
        goToCard(currentIndex + 1);
      }
    }, autoplayDelay);
    
    // Update autoplay button icon to pause
    if (autoplayBtn) {
      autoplayBtn.innerHTML = '<svg viewBox="0 0 24 24"><path d="M6 4h4v16H6zm8 0h4v16h-4z"/></svg>';
      autoplayBtn.setAttribute('aria-label', 'Pause carousel animation');
    }
  }
  
  function pauseAutoplay() {
    isAutoplayPaused = true;
    
    // Update autoplay button icon to play
    if (autoplayBtn) {
      autoplayBtn.innerHTML = '<svg viewBox="0 0 24 24"><path d="M8 5v14l11-7z"/></svg>';
      autoplayBtn.setAttribute('aria-label', 'Play carousel animation');
    }
  }
  
  function toggleAutoplay() {
    isAutoplayPaused = !isAutoplayPaused;
    
    if (isAutoplayPaused) {
      pauseAutoplay();
    } else {
      startAutoplay();
    }
  }
  
  // Initialize autoplay
  startAutoplay();
  
  // Set up event listeners for autoplay control
  if (autoplayBtn) {
    autoplayBtn.addEventListener('click', toggleAutoplay);
  }
  
  // Pause autoplay on user interaction
  const carouselContainer = document.querySelector(`${sectionId} .pc-carousel-${lastPart}`);
  if (carouselContainer) {
    carouselContainer.addEventListener('mouseenter', pauseAutoplay);
    carouselContainer.addEventListener('mouseleave', () => {
      isAutoplayPaused = false;
      startAutoplay();
    });
  }
  
  // Set up card interactions (your existing code)
  allCards.forEach((card) => {
    card.addEventListener("mousemove", (e) => {
      const rect = card.getBoundingClientRect();
      const x = (e.clientX - rect.left) / rect.width;
      const y = (e.clientY - rect.top) / rect.height;
      const xDeg = (y - 0.5) * 8;
      const yDeg = (x - 0.5) * -8;
      card.style.transform = `perspective(1200px) rotateX(${xDeg}deg) rotateY(${yDeg}deg)`;
      
      const layers = card.querySelectorAll(`.pc-card-layer-${lastPart}`);
      layers.forEach((layer, index) => {
        const depth = 30 * (index + 1);
        const translateZ = depth;
        const offsetX = (x - 0.5) * 10 * (index + 1);
        const offsetY = (y - 0.5) * 10 * (index + 1);
        layer.style.transform = `translate3d(${offsetX}px, ${offsetY}px, ${translateZ}px)`;
      });
      
      const bgImage = card.querySelector(`.pc-card-bg-image-${lastPart}`);
      if (bgImage) {
        const moveX = (x - 0.5) * -20;
        const moveY = (y - 0.5) * -20;
        bgImage.style.transform = `translate(${moveX}px, ${moveY}px) scale(1.05)`;
      }
      
      const bgObjects = card.querySelectorAll(`.pc-bg-object-${lastPart}`);
      bgObjects.forEach((obj, index) => {
        const factorX = (index + 1) * 10;
        const factorY = (index + 1) * 8;
        const moveX = (x - 0.5) * factorX;
        const moveY = (y - 0.5) * factorY;
        if (obj.classList.contains(`pc-square-${lastPart}`)) {
          obj.style.transform = `rotate(45deg) translate(${moveX}px, ${moveY}px)`;
        } else if (obj.classList.contains(`pc-triangle-${lastPart}`)) {
          obj.style.transform = `translate(calc(-50% + ${moveX}px), calc(-50% + ${moveY}px)) scale(1)`;
        } else {
          obj.style.transform = `translate(${moveX}px, ${moveY}px)`;
        }
      });
    });

    card.addEventListener("mouseleave", () => {
      card.style.transform = "";
      const layers = card.querySelectorAll(`.pc-card-layer-${lastPart}`);
      layers.forEach((layer) => {
        layer.style.transform = "";
      });
      
      const bgImage = card.querySelector(`.pc-card-bg-image-${lastPart}`);
      if (bgImage) {
        bgImage.style.transform = "";
      }
      
      const bgObjects = card.querySelectorAll(`.pc-bg-object-${lastPart}`);
      bgObjects.forEach((obj) => {
        if (obj.classList.contains(`pc-square-${lastPart}`)) {
          obj.style.transform = "rotate(45deg) translateY(-20px)";
        } else if (obj.classList.contains(`pc-triangle-${lastPart}`)) {
          obj.style.transform = "translate(-50%, -50%) scale(0.5)";
        } else {
          obj.style.transform = "translateY(20px)";
        }
      });
    });
  });

  function goToCard(index, animate = true) {
    if (animate) {
      track.style.transition = "transform 0.6s cubic-bezier(0.16, 1, 0.3, 1)";
    } else {
      track.style.transition = "none";
    }
    
    const cardWidth = allCards[0].offsetWidth;
    const cardMargin = {{ section.settings.card_gap }};
    const totalCardWidth = cardWidth + cardMargin;
    const translateX = -index * totalCardWidth;
    
    track.style.transform = `translateX(${translateX}px)`;
    
    // Update current index
    currentIndex = index;
    
    // Update dots for the original cards only
    let dotIndex = index - 1;
    if (dotIndex < 0) dotIndex = cards.length - 1;
    if (dotIndex >= cards.length) dotIndex = 0;
    
    dots.forEach((dot, i) => {
      dot.classList.toggle(`pc-active-${lastPart}`, i === dotIndex);
    });
    
    // Restart autoplay timer after manual navigation
    if (!isAutoplayPaused) {
      clearInterval(autoplayInterval);
      startAutoplay();
    }
  }

  function handleCarouselTransition() {
    // If we're at the beginning (clone of last card), jump to the real last card
    if (currentIndex === 0) {
      goToCard(cards.length, false);
    }
    // If we're at the end (clone of first card), jump to the real first card
    else if (currentIndex === totalCards - 1) {
      goToCard(1, false);
    }
  }

  // Listen for transition end to handle the seamless looping
  track.addEventListener('transitionend', handleCarouselTransition);

  if (prevBtn) {
    prevBtn.addEventListener("click", () => {
      goToCard(currentIndex - 1);
    });
  }

  if (nextBtn) {
    nextBtn.addEventListener("click", () => {
      goToCard(currentIndex + 1);
    });
  }

  document.addEventListener("keydown", (e) => {
    if (e.key === "ArrowLeft") {
      goToCard(currentIndex - 1);
    } else if (e.key === "ArrowRight") {
      goToCard(currentIndex + 1);
    }
  });

  let touchStartX = 0;
  let touchEndX = 0;

  track.addEventListener("touchstart", (e) => {
    touchStartX = e.changedTouches[0].screenX;
  });

  track.addEventListener("touchend", (e) => {
    touchEndX = e.changedTouches[0].screenX;
    handleSwipe();
  });

  function handleSwipe() {
    if (touchStartX - touchEndX > 50) {
      goToCard(currentIndex + 1);
    } else if (touchEndX - touchStartX > 50) {
      goToCard(currentIndex - 1);
    }
  }

  window.addEventListener("resize", () => {
    const newCardWidth = allCards[0].offsetWidth;
    const newTotalCardWidth = newCardWidth + {{ section.settings.card_gap }};

    const translateX = -currentIndex * newTotalCardWidth;
    track.style.transition = "none";
    track.style.transform = `translateX(${translateX}px)`;

    setTimeout(() => {
      track.style.transition = "transform 0.6s cubic-bezier(0.16, 1, 0.3, 1)";
    }, 50);
  });
});
</script>

{% schema %}
{
  "name": "PWC - Card Carousel #1",
  "class": "pc-card-carousel-section",
  "settings": [
    {
      "type": "header",
      "content": "General Settings"
    },
    {
      "type": "range",
      "id": "max_width",
      "label": "Max Container Width",
      "min": 800,
      "max": 1800,
      "step": 50,
      "unit": "px",
      "default": 1400
    },
    {
      "type": "range",
      "id": "card_width",
      "label": "Card Width",
      "min": 200,
      "max": 500,
      "step": 10,
      "unit": "px",
      "default": 300
    },
    {
      "type": "range",
      "id": "card_height",
      "label": "Card Height",
      "min": 300,
      "max": 600,
      "step": 20,
      "unit": "px",
      "default": 400
    },
    {
      "type": "range",
      "id": "card_gap",
      "label": "Card Gap",
      "min": 10,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 40
    },
    {
      "type": "header",
      "content": "Color Settings"
    },
    {
      "type": "color",
      "id": "bg_color",
      "label": "Background Color",
      "default": "#f1f1f1"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#080808"
    },
    {
      "type": "color",
      "id": "card_bg_color",
      "label": "Card Background Color",
      "default": "#fafafa"
    },
    {
      "type": "color",
      "id": "accent_color",
      "label": "Accent Color",
      "default": "#ff2d55"
    },
    {
      "type": "color",
      "id": "grid_color",
      "label": "Grid Color",
      "default": "rgba(0, 0, 0, 0.08)"
    },
    {
      "type": "color",
      "id": "frame_color",
      "label": "Frame Color",
      "default": "rgba(8, 8, 8, 0.8)"
    },
    {
      "type": "header",
      "content": "Typography Settings"
    },
    {
      "type": "range",
      "id": "heading_font_size",
      "label": "Heading Font Size",
      "min": 16,
      "max": 48,
      "step": 2,
      "unit": "px",
      "default": 32
    },
    {
      "type": "select",
      "id": "heading_font_weight",
      "label": "Heading Font Weight",
      "options": [
        { "value": "300", "label": "Light" },
        { "value": "400", "label": "Regular" },
        { "value": "500", "label": "Medium" },
        { "value": "700", "label": "Bold" },
        { "value": "900", "label": "Black" }
      ],
      "default": "900"
    },
    {
      "type": "range",
      "id": "subheading_font_size",
      "label": "Subheading Font Size",
      "min": 12,
      "max": 24,
      "step": 1,
      "unit": "px",
      "default": 14
    },
    {
      "type": "range",
      "id": "meta_font_size",
      "label": "Meta Text Font Size",
      "min": 10,
      "max": 18,
      "step": 1,
      "unit": "px",
      "default": 12
    },
    {
      "type": "range",
      "id": "body_font_size",
      "label": "Body Text Font Size",
      "min": 12,
      "max": 20,
      "step": 1,
      "unit": "px",
      "default": 14
    },
    {
      "type": "range",
      "id": "cta_font_size",
      "label": "CTA Text Font Size",
      "min": 10,
      "max": 16,
      "step": 1,
      "unit": "px",
      "default": 12
    },
    {
      "type": "header",
      "content": "Desktop Spacing"
    },
    {
      "type": "range",
      "id": "section_padding_top",
      "label": "Section Top Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "section_padding_right",
      "label": "Section Right Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "section_padding_bottom",
      "label": "Section Bottom Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "section_padding_left",
      "label": "Section Left Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 0
    },
    {
      "type": "range",
      "id": "carousel_padding_top",
      "label": "Carousel Top Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 5
    },
    {
      "type": "range",
      "id": "carousel_padding_bottom",
      "label": "Carousel Bottom Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 5
    },
    {
      "type": "header",
      "content": "Mobile Settings"
    },
    {
      "type": "range",
      "id": "mobile_card_width",
      "label": "Mobile Card Width",
      "min": 150,
      "max": 400,
      "step": 10,
      "unit": "px",
      "default": 280
    },
    {
      "type": "range",
      "id": "mobile_card_height",
      "label": "Mobile Card Height",
      "min": 250,
      "max": 500,
      "step": 10,
      "unit": "px",
      "default": 380
    },
    {
      "type": "range",
      "id": "mobile_card_gap",
      "label": "Mobile Card Gap",
      "min": 5,
      "max": 50,
      "step": 5,
      "unit": "px",
      "default": 20
    },
    {
      "type": "range",
      "id": "mobile_heading_font_size",
      "label": "Mobile Heading Font Size",
      "min": 14,
      "max": 36,
      "step": 2,
      "unit": "px",
      "default": 28
    },
    {
      "type": "range",
      "id": "mobile_section_padding_top",
      "label": "Mobile Section Top Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 20
    },
    {
      "type": "range",
      "id": "mobile_section_padding_right",
      "label": "Mobile Section Right Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 20
    },
    {
      "type": "range",
      "id": "mobile_section_padding_bottom",
      "label": "Mobile Section Bottom Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 20
    },
    {
      "type": "range",
      "id": "mobile_section_padding_left",
      "label": "Mobile Section Left Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 20
    }
  ],
  "blocks": [
    {
      "type": "card",
      "name": "Card",
      "settings": [
        {
          "type": "select",
          "id": "card_type",
          "label": "Card Type",
          "options": [
            { "value": "image", "label": "Image Background" },
            { "value": "text", "label": "Text Background" }
          ],
          "default": "image"
        },
        {
          "type": "image_picker",
          "id": "background_image",
          "label": "Background Image",
          "info": "Only applies to image background cards"
        },
        {
          "type": "text",
          "id": "heading",
          "label": "Heading",
          "default": "CARD HEADING"
        },
        {
          "type": "text",
          "id": "subheading",
          "label": "Subheading",
          "default": "Card subheading text"
        },
        {
          "type": "text",
          "id": "category",
          "label": "Category",
          "default": "CATEGORY"
        },
        {
          "type": "textarea",
          "id": "description",
          "label": "Description",
          "default": "Card description text goes here with more details about this card."
        },
        {
          "type": "text",
          "id": "link_text",
          "label": "Link Text",
          "default": "OPEN CALCULATOR"
        },
        {
          "type": "url",
          "id": "link_url",
          "label": "Link URL"
        },
        {
          "type": "select",
          "id": "link_target",
          "label": "Link Target",
          "options": [
            { "value": "_self", "label": "Same Window" },
            { "value": "_blank", "label": "New Window" }
          ],
          "default": "_blank"
        },
        {
          "type": "select",
          "id": "content_alignment",
          "label": "Content Alignment",
          "options": [
            { "value": "left", "label": "Left" },
            { "value": "right", "label": "Right" }
          ],
          "default": "left"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "PWC - Card Carousel #8",
      "category": "Custom",
      "blocks": [
        {
          "type": "card",
          "settings": {
            "card_type": "image",
            "heading": "PREGNANCY",
            "subheading": "DUE DATE CALCULATOR",
            "category": "HEALTH",
            "description": "Calculate your expected delivery date with precision based on your last period or conception date.",
            "link_text": "OPEN CALCULATOR"
          }
        },
        {
          "type": "card",
          "settings": {
            "card_type": "image",
            "heading": "BABY EYE",
            "subheading": "COLOR CALCULATOR",
            "category": "BIOLOGY",
            "description": "Predict possible eye colors for your baby based on parental genetics and inheritance patterns.",
            "link_text": "OPEN CALCULATOR"
          }
        },
        {
          "type": "card",
          "settings": {
            "card_type": "text",
            "heading": "PERCENTAGE",
            "subheading": "PRECISION CALCULATOR",
            "category": "MATH",
            "description": "Calculate percentages for discounts, taxes, tips, and any percentage-based math with ease and accuracy.",
            "link_text": "OPEN CALCULATOR",
            "content_alignment": "right"
          }
        }
      ]
    }
  ]
}
{% endschema %}