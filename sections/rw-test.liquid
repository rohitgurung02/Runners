{%- assign sec_id = '#shopify-section-' | append: section.id -%}
{%- assign parts = sec_id | split: '_' -%}
{%- assign last_lower = parts | last -%}
{%- assign last_part = last_lower | downcase -%}

<style>
  {{ sec_id }} {
    display: flex;
    justify-content: center;
    flex-direction: column;
    align-items: center;
    min-height: 100svh;
    font-family: system-ui, sans-serif;
    font-kerning: none;
    font-variant-ligatures: none;
    text-rendering: optimizeSpeed;
    background-color: {{ section.settings.background_color }};
    color: {{ section.settings.text_color }};
    padding: {{ section.settings.desktop_padding }}px;
  }

  {{ sec_id }} .pc-animation-grid-{{ last_part }} {
    margin: 0 auto;
    padding: 20px;
    width: 100%;
    max-width: 1200px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 20px;
    justify-content: center;
    container-type: inline-size;
  }

  {{ sec_id }} .pc-animation-item-{{ last_part }} {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    min-height: 200px;
    padding: 20px;
    container-type: inline-size;
    border-radius: 1cqw;
    background: {{ section.settings.card_background }};
    color: {{ section.settings.card_text }};
    transition: background-color .25s ease-out;
  }

  {{ sec_id }} .pc-animation-item-{{ last_part }}:hover {
    cursor: default;
    background: {{ section.settings.card_hover_background }};
  }

  {{ sec_id }} .pc-animation-item-{{ last_part }} h2 {
    text-align: center;
    font-size: clamp(20px, 8cqw, 30px);
    will-change: transform;
  }

  {{ sec_id }} .pc-word-3d-{{ last_part }} {
    perspective: 1000px;
    position: relative;
    transform-style: preserve-3d;
    transform-origin: 50% 50% 1rem;
  }

  {{ sec_id }} .pc-face-{{ last_part }} {
    position: absolute;
    left: 0;
    opacity: 0;
  }

  {{ sec_id }} .pc-face-front-{{ last_part }} {
    opacity: 1;
  }

  {{ sec_id }} .pc-face-bottom-{{ last_part }} {
    top: 100%;
    transform-origin: 50% 0%;
    transform: rotateX(90deg);
  }

  {{ sec_id }} .pc-face-top-{{ last_part }} {
    bottom: 100%;
    transform-origin: 50% 100%;
    transform: rotateX(-90deg);
  }

  {{ sec_id }} .pc-face-back-{{ last_part }} {
    top: 0;
    transform-origin: 50% 50%;
    transform: translateZ(2.5rem) rotateX(-180deg);
  }

  @media (max-width: 768px) {
    {{ sec_id }} {
      padding: {{ section.settings.mobile_padding }}px;
    }
  }
</style>

<div class="pc-animation-grid-{{ last_part }}">
  <div class="pc-animation-item-{{ last_part }}" id="pc-horizontal-split-{{ last_part }}">
    <h2>Horizontal split</h2>
  </div>
  <div class="pc-animation-item-{{ last_part }}" id="pc-wavy-text-effect-{{ last_part }}">
    <h2>Waaaaavvvvy</h2>
  </div>
  <div class="pc-animation-item-{{ last_part }}" id="pc-raining-letters-{{ last_part }}">
    <h2>Raining letters</h2>
  </div>
  <div class="pc-animation-item-{{ last_part }}" id="pc-subtle-highlight-{{ last_part }}">
    <h2>Subtle text highlight</h2>
  </div>
  <div class="pc-animation-item-{{ last_part }}" id="pc-words-3d-jp-{{ last_part }}">
    <h2>3Dで単語を回転させる</h2>
  </div>
  <div class="pc-animation-item-{{ last_part }}" id="pc-exploding-characters-{{ last_part }}">
    <h2>Exploding characters</h2>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const sectionId = '{{ sec_id }}';
    const lastPart = '{{ last_part }}';
    
    // Horizontal Split Animation
    function initHorizontalSplit() {
      const root = document.querySelector(`${sectionId} #pc-horizontal-split-${lastPart}`);
      const heading = root.querySelector('h2');
      
      // Split text into spans for animation
      const text = heading.textContent;
      heading.innerHTML = '';
      
      text.split('').forEach((char, i) => {
        const span = document.createElement('span');
        span.className = `pc-char-${lastPart}`;
        span.style.display = 'inline-block';
        span.style.overflow = 'hidden';
        
        const innerSpan = document.createElement('span');
        innerSpan.textContent = char;
        innerSpan.style.display = 'inline-block';
        innerSpan.style.transform = 'translateX(0)';
        innerSpan.style.transition = 'transform 0.4s cubic-bezier(0.16, 1, 0.3, 1)';
        
        span.appendChild(innerSpan);
        heading.appendChild(span);
        
        span.addEventListener('mouseenter', () => {
          innerSpan.style.transform = 'translateX(100%)';
        });
        
        span.addEventListener('mouseleave', () => {
          innerSpan.style.transform = 'translateX(0)';
        });
      });
    }
    
    // Wavy Text Effect
    function initWavyText() {
      const root = document.querySelector(`${sectionId} #pc-wavy-text-effect-${lastPart}`);
      const heading = root.querySelector('h2');
      
      // Split text into spans for animation
      const text = heading.textContent;
      heading.innerHTML = '';
      
      text.split('').forEach((char, i) => {
        const span = document.createElement('span');
        span.className = `pc-wavy-char-${lastPart}`;
        span.textContent = char;
        span.style.display = 'inline-block';
        span.style.transform = 'translateY(0)';
        span.style.transition = 'transform 0.5s cubic-bezier(0.5, 0, 0.5, 1)';
        
        heading.appendChild(span);
        
        root.addEventListener('mouseenter', () => {
          const delay = i * 50;
          setTimeout(() => {
            span.style.transform = 'translateY(-50%)';
            setTimeout(() => {
              span.style.transform = 'translateY(50%)';
              setTimeout(() => {
                span.style.transform = 'translateY(0)';
              }, 250);
            }, 250);
          }, delay);
        });
      });
    }
    
    // Raining Letters Effect
    function initRainingLetters() {
      const root = document.querySelector(`${sectionId} #pc-raining-letters-${lastPart}`);
      const heading = root.querySelector('h2');
      
      // Split text into spans for animation
      const text = heading.textContent;
      heading.innerHTML = '';
      
      text.split('').forEach((char, i) => {
        const span = document.createElement('span');
        span.className = `pc-rain-char-${lastPart}`;
        span.style.display = 'inline-block';
        span.style.overflow = 'hidden';
        
        const innerSpan = document.createElement('span');
        innerSpan.textContent = char;
        innerSpan.style.display = 'inline-block';
        innerSpan.style.transform = 'translateY(0)';
        innerSpan.style.transition = 'transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1)';
        
        span.appendChild(innerSpan);
        heading.appendChild(span);
        
        root.addEventListener('mouseenter', () => {
          setTimeout(() => {
            innerSpan.style.transform = 'translateY(100%)';
          }, Math.random() * 300);
        });
        
        root.addEventListener('mouseleave', () => {
          setTimeout(() => {
            innerSpan.style.transform = 'translateY(0)';
          }, Math.random() * 300);
        });
      });
    }
    
    // Subtle Highlight Effect
    function initSubtleHighlight() {
      const root = document.querySelector(`${sectionId} #pc-subtle-highlight-${lastPart}`);
      const heading = root.querySelector('h2');
      
      // Split text into spans for animation
      const text = heading.textContent;
      heading.innerHTML = '';
      
      text.split('').forEach((char, i) => {
        const span = document.createElement('span');
        span.className = `pc-highlight-char-${lastPart}`;
        span.textContent = char;
        span.style.opacity = '0.25';
        span.style.transition = 'opacity 0.35s cubic-bezier(0.34, 1.56, 0.64, 1), text-shadow 0.35s cubic-bezier(0.34, 1.56, 0.64, 1)';
        
        heading.appendChild(span);
        
        root.addEventListener('mouseenter', () => {
          setTimeout(() => {
            span.style.opacity = '1';
            span.style.textShadow = '0 0 30px rgba(255,255,255,0.9)';
          }, i * 12);
        });
        
        root.addEventListener('mouseleave', () => {
          setTimeout(() => {
            span.style.opacity = '0.25';
            span.style.textShadow = 'none';
          }, i * 12);
        });
      });
    }
    
    // 3D Word Rotation Effect
    function init3DWords() {
      const root = document.querySelector(`${sectionId} #pc-words-3d-jp-${lastPart}`);
      const heading = root.querySelector('h2');
      
      // Split text into words for animation
      const text = heading.textContent;
      heading.innerHTML = '';
      
      text.split('').forEach((char, i) => {
        const wordWrapper = document.createElement('span');
        wordWrapper.className = `pc-word-3d-${lastPart} pc-word-${i}-${lastPart}`;
        
        const faceTop = document.createElement('em');
        faceTop.className = `pc-face-${lastPart} pc-face-top-${lastPart}`;
        faceTop.textContent = char;
        
        const faceFront = document.createElement('em');
        faceFront.className = `pc-face-${lastPart} pc-face-front-${lastPart}`;
        faceFront.textContent = char;
        
        const faceBottom = document.createElement('em');
        faceBottom.className = `pc-face-${lastPart} pc-face-bottom-${lastPart}`;
        faceBottom.textContent = char;
        
        const faceBack = document.createElement('em');
        faceBack.className = `pc-face-${lastPart} pc-face-back-${lastPart}`;
        faceBack.textContent = char;
        
        wordWrapper.appendChild(faceTop);
        wordWrapper.appendChild(faceFront);
        wordWrapper.appendChild(faceBottom);
        wordWrapper.appendChild(faceBack);
        
        heading.appendChild(wordWrapper);
        
        wordWrapper.addEventListener('mouseenter', () => {
          wordWrapper.style.transform = 'rotateX(-180deg)';
          faceTop.style.opacity = '0';
          faceFront.style.opacity = '0';
          faceBottom.style.opacity = '1';
          faceBack.style.opacity = '1';
        });
        
        wordWrapper.addEventListener('mouseleave', () => {
          wordWrapper.style.transform = 'rotateX(0)';
          faceTop.style.opacity = '0';
          faceFront.style.opacity = '1';
          faceBottom.style.opacity = '0';
          faceBack.style.opacity = '0';
        });
      });
    }
    
    // Exploding Characters Effect
    function initExplodingCharacters() {
      const root = document.querySelector(`${sectionId} #pc-exploding-characters-${lastPart}`);
      const heading = root.querySelector('h2');
      
      // Split text into spans for animation
      const text = heading.textContent;
      heading.innerHTML = '';
      
      text.split('').forEach((char, i) => {
        const span = document.createElement('span');
        span.className = `pc-explode-char-${lastPart}`;
        span.textContent = char;
        span.style.display = 'inline-block';
        span.style.transform = 'translate(0, 0) rotate(0)';
        span.style.transition = 'transform 0.75s cubic-bezier(0.34, 1.56, 0.64, 1)';
        
        heading.appendChild(span);
        
        root.addEventListener('mouseenter', () => {
          const x = (Math.random() * 6 - 3) + 'rem';
          const y = (Math.random() * 10 - 5) + 'rem';
          const rotate = (Math.random() * 360 - 180) + 'deg';
          setTimeout(() => {
            span.style.transform = `translate(${x}, ${y}) rotate(${rotate})`;
          }, Math.random() * 300);
        });
        
        root.addEventListener('mouseleave', () => {
          setTimeout(() => {
            span.style.transform = 'translate(0, 0) rotate(0)';
          }, Math.random() * 300);
        });
      });
    }
    
    // Initialize all animations
    initHorizontalSplit();
    initWavyText();
    initRainingLetters();
    initSubtleHighlight();
    init3DWords();
    initExplodingCharacters();
  });
</script>

{% schema %}
{
  "name": "PWC - Text Animation #1",
  "settings": [
    {
      "type": "header",
      "content": "Color Settings"
    },
    {
      "type": "color",
      "id": "background_color",
      "label": "Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text Color",
      "default": "#333333"
    },
    {
      "type": "color",
      "id": "card_background",
      "label": "Card Background",
      "default": "#2A2A2A"
    },
    {
      "type": "color",
      "id": "card_text",
      "label": "Card Text Color",
      "default": "#D0D0D0"
    },
    {
      "type": "color",
      "id": "card_hover_background",
      "label": "Card Hover Background",
      "default": "#303030"
    },
    {
      "type": "header",
      "content": "Spacing Settings"
    },
    {
      "type": "range",
      "id": "desktop_padding",
      "label": "Desktop Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 20
    },
    {
      "type": "range",
      "id": "mobile_padding",
      "label": "Mobile Padding",
      "min": 0,
      "max": 100,
      "step": 5,
      "unit": "px",
      "default": 10
    }
  ],
  "presets": [
    {
      "name": "PWC - Text Animation #1",
      "category": "Custom"
    }
  ]
}
{% endschema %}