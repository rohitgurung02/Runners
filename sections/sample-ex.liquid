{% comment %}
  Image Comparison Slider - Shopify Liquid Component
  With fixed left-to-right and right-to-left animations
{% endcomment %}

<div class="image-comparison-slider">
  <figure class="cd-image-container">
    <img src="{{ section.settings.before_image | img_url: '1000x' }}" alt="Before image" loading="lazy"/>
    <span class="cd-image-label" data-type="original">Before</span>

    <div class="cd-resize-img">
      <img src="{{ section.settings.after_image | img_url: '1000x' }}" alt="After image" loading="lazy"/>
      <span class="cd-image-label" data-type="modified">After</span>
    </div>

    <span class="cd-handle"></span>
  </figure>
</div>

<style>
  /* Image Comparison Slider Styles */
  .image-comparison-slider {
    margin: 2rem 0;
  }
  
  .cd-image-container {
    position: relative;
    width: 100%;
    max-width: 768px;
    margin: 0 auto;
    overflow: hidden;
  }
  
  .cd-image-container img {
    display: block;
    width: 100%;
    height: auto;
    pointer-events: none;
  }
  
  .cd-image-label {
    position: absolute;
    bottom: 0;
    right: 0;
    color: #ffffff;
    padding: 1em;
    opacity: 0;
    transform: translateY(20px);
    transition: transform 0.3s 0.7s, opacity 0.3s 0.7s;
    font-size: 14px;
    background: rgba(0,0,0,0.5);
    border-radius: 4px;
    pointer-events: none;
    z-index: 2;
  }
  
  .cd-image-label.is-hidden {
    visibility: hidden;
  }
  
  .is-visible .cd-image-label {
    opacity: 1;
    transform: translateY(0);
  }
  
  .cd-resize-img {
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 100%;
    overflow: hidden;
    transform: translateZ(0);
    backface-visibility: hidden;
    will-change: width;
    transition: width 0.3s ease;
  }
  
  .cd-resize-img img {
    position: absolute;
    left: 0;
    top: 0;
    display: block;
    height: 100%;
    width: auto;
    max-width: none;
  }
  
  .cd-resize-img .cd-image-label {
    right: auto;
    left: 0;
  }
  
  .cd-handle {
    position: absolute;
    height: 44px;
    width: 44px;
    left: 50%;
    top: 50%;
    margin-left: -22px;
    margin-top: -22px;
    border-radius: 50%;
    background: #dc717d;
    cursor: ew-resize;
    box-shadow: 0 0 0 6px rgba(0, 0, 0, 0.2), 0 0 10px rgba(0, 0, 0, 0.6), inset 0 1px 0 rgba(255, 255, 255, 0.3);
    opacity: 0;
    transform: translate3d(0, 0, 0) scale(0);
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.3s 0.7s, opacity 0.3s 0.7s, background-color 0.2s;
  }
  
  .cd-handle::before,
  .cd-handle::after {
    content: '';
    position: absolute;
    width: 12px;
    height: 2px;
    background: white;
  }
  
  .cd-handle::before {
    transform: rotate(45deg);
    left: 12px;
  }
  
  .cd-handle::after {
    transform: rotate(-45deg);
    right: 12px;
  }
  
  .cd-handle.draggable {
    background-color: #445b7c;
  }
  
  .is-visible .cd-handle {
    opacity: 1;
    transform: translate3d(0, 0, 0) scale(1);
  }
  
  .is-visible .cd-resize-img {
    width: 50%;
    animation: cd-bounce-in 0.7s;
  }
  
  @keyframes cd-bounce-in {
    0% { width: 0; }
    60% { width: 55%; }
    100% { width: 50%; }
  }
  
  /* Animation classes */
  .animate-left {
    animation: slide-left 0.7s forwards;
  }
  
  .animate-right {
    animation: slide-right 0.7s forwards;
  }
  
  @keyframes slide-left {
    0% { width: 100%; }
    100% { width: 0%; }
  }
  
  @keyframes slide-right {
    0% { width: 0%; }
    100% { width: 100%; }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize all image comparison sliders on the page
  const containers = document.querySelectorAll('.cd-image-container');
  
  containers.forEach(container => {
    initImageComparison(container);
  });
  
  // Check if elements are in viewport to trigger animation
  checkPosition(containers);
  window.addEventListener('scroll', throttle(() => checkPosition(containers), 100));
  window.addEventListener('resize', throttle(() => checkLabel(containers), 100));
  
  // Add animation buttons (optional - you can remove if not needed)
  addAnimationControls();
});

function initImageComparison(container) {
  const handle = container.querySelector('.cd-handle');
  const resizeImg = container.querySelector('.cd-resize-img');
  const originalLabel = container.querySelector('.cd-image-label[data-type="original"]');
  const modifiedLabel = container.querySelector('.cd-image-label[data-type="modified"]');
  
  // Make the handle draggable
  setupDraggable(handle, resizeImg, container, originalLabel, modifiedLabel);
  
  // Initialize labels
  updateLabel(modifiedLabel, resizeImg, 'left');
  updateLabel(originalLabel, resizeImg, 'right');
  
  // Set initial position when visible
  if (container.classList.contains('is-visible')) {
    resizeImg.style.width = '50%';
    handle.style.left = '50%';
  }
}

function setupDraggable(handle, resizeElement, container, originalLabel, modifiedLabel) {
  let isDragging = false;
  let startX, startWidth, containerWidth;
  
  handle.addEventListener('mousedown', startDrag);
  handle.addEventListener('touchstart', startDrag, { passive: false });
  
  function startDrag(e) {
    e.preventDefault();
    isDragging = true;
    
    // Get initial positions
    startX = e.clientX || e.touches[0].clientX;
    startWidth = parseInt(window.getComputedStyle(resizeElement).width, 10);
    containerWidth = container.offsetWidth;
    
    // Add active classes
    handle.classList.add('draggable');
    resizeElement.classList.add('resizable');
    
    // Add event listeners
    document.addEventListener('mousemove', drag);
    document.addEventListener('touchmove', drag, { passive: false });
    document.addEventListener('mouseup', stopDrag);
    document.addEventListener('touchend', stopDrag);
  }
  
  function drag(e) {
    if (!isDragging) return;
    e.preventDefault();
    
    const clientX = e.clientX || e.touches[0].clientX;
    const deltaX = clientX - startX;
    let newWidth = startWidth + deltaX;
    
    // Constrain to container
    newWidth = Math.max(0, Math.min(newWidth, containerWidth));
    
    // Calculate percentage
    const percent = (newWidth / containerWidth) * 100;
    
    // Update positions
    resizeElement.style.width = `${percent}%`;
    handle.style.left = `${percent}%`;
    
    // Update labels
    updateLabel(modifiedLabel, resizeElement, 'left');
    updateLabel(originalLabel, resizeElement, 'right');
  }
  
  function stopDrag() {
    if (!isDragging) return;
    isDragging = false;
    
    // Remove active classes
    handle.classList.remove('draggable');
    resizeElement.classList.remove('resizable');
    
    // Remove event listeners
    document.removeEventListener('mousemove', drag);
    document.removeEventListener('touchmove', drag);
    document.removeEventListener('mouseup', stopDrag);
    document.removeEventListener('touchend', stopDrag);
  }
}

function updateLabel(label, resizeElement, position) {
  if (!label || !resizeElement) return;
  
  const labelRect = label.getBoundingClientRect();
  const resizeRect = resizeElement.getBoundingClientRect();
  
  if (position === 'left') {
    (labelRect.left + labelRect.width < resizeRect.left + resizeRect.width) 
      ? label.classList.remove('is-hidden')
      : label.classList.add('is-hidden');
  } else {
    (labelRect.left > resizeRect.left + resizeRect.width)
      ? label.classList.remove('is-hidden')
      : label.classList.add('is-hidden');
  }
}

function checkPosition(containers) {
  containers.forEach(container => {
    const rect = container.getBoundingClientRect();
    const isVisible = (rect.top <= window.innerHeight * 0.75) && 
                     (rect.bottom >= window.innerHeight * 0.25);
    
    if (isVisible) {
      container.classList.add('is-visible');
    }
  });
}

function checkLabel(containers) {
  containers.forEach(container => {
    const modifiedLabel = container.querySelector('.cd-image-label[data-type="modified"]');
    const originalLabel = container.querySelector('.cd-image-label[data-type="original"]');
    const resizeImg = container.querySelector('.cd-resize-img');
    
    updateLabel(modifiedLabel, resizeImg, 'left');
    updateLabel(originalLabel, resizeImg, 'right');
  });
}

// Optional animation controls (can be removed if not needed)
function addAnimationControls() {
  const sliders = document.querySelectorAll('.image-comparison-slider');
  
  sliders.forEach(slider => {
    const controls = document.createElement('div');
    controls.className = 'animation-controls';
    controls.style.display = 'flex';
    controls.style.justifyContent = 'center';
    controls.style.margin = '10px 0';
    controls.style.gap = '10px';
    
    const leftBtn = document.createElement('button');
    leftBtn.textContent = '◀ Show Before';
    leftBtn.style.padding = '8px 16px';
    leftBtn.style.cursor = 'pointer';
    
    const rightBtn = document.createElement('button');
    rightBtn.textContent = 'Show After ▶';
    rightBtn.style.padding = '8px 16px';
    rightBtn.style.cursor = 'pointer';
    
    const resetBtn = document.createElement('button');
    resetBtn.textContent = 'Reset';
    resetBtn.style.padding = '8px 16px';
    resetBtn.style.cursor = 'pointer';
    
    const resizeImg = slider.querySelector('.cd-resize-img');
    const handle = slider.querySelector('.cd-handle');
    
    leftBtn.addEventListener('click', () => {
      resizeImg.classList.remove('animate-right');
      resizeImg.classList.add('animate-left');
      handle.style.left = '0%';
    });
    
    rightBtn.addEventListener('click', () => {
      resizeImg.classList.remove('animate-left');
      resizeImg.classList.add('animate-right');
      handle.style.left = '100%';
    });
    
    resetBtn.addEventListener('click', () => {
      resizeImg.classList.remove('animate-left', 'animate-right');
      resizeImg.style.width = '50%';
      handle.style.left = '50%';
    });
    
    controls.appendChild(leftBtn);
    controls.appendChild(resetBtn);
    controls.appendChild(rightBtn);
    slider.appendChild(controls);
  });
}

// Throttle function to limit how often a function can fire
function throttle(func, limit) {
  let inThrottle;
  return function() {
    const args = arguments;
    const context = this;
    if (!inThrottle) {
      func.apply(context, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}
</script>

{% schema %}
{
  "name": "Image Comparison Slider",
  "settings": [
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before Image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After Image"
    }
  ],
  "presets": [
    {
      "name": "Image Comparison Slider",
      "category": "Media"
    }
  ]
}
{% endschema %}