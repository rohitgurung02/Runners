{% comment %}
  Image Comparison Slider - Shopify Liquid Component
  Drag-only version without buttons
{% endcomment %}

<style>
  /* Image Comparison Slider Styles */
  .image-comparison-slider {
    margin: 2rem 0;
  }
  
  .cd-image-container {
    position: relative;
    width: 100%;
    max-width: 768px;
    margin: 0 auto;
    overflow: hidden;
  }
  
  .cd-image-container img {
    display: block;
    width: 100%;
    height: 600px;
    pointer-events: none;
    object-fit: cover;
  }
  
  .cd-image-label {
    position: absolute;
    bottom: 0;
    right: 0;
    color: #ffffff;
    padding: 1em;
    opacity: 0;
    transform: translateY(20px);
    transition: transform 0.3s 0.7s, opacity 0.3s 0.7s;
    font-size: 14px;
    background: rgba(0,0,0,0.5);
    border-radius: 4px;
    pointer-events: none;
    z-index: 2;
  }
  
  .cd-image-label.is-hidden {
    visibility: hidden;
  }
  
  .is-visible .cd-image-label {
    opacity: 1;
    transform: translateY(0);
  }
  
  .cd-resize-img {
    position: absolute;
    top: 0;
    left: 0;
    width: 50%;
    height: 100%;
    overflow: hidden;
    transform: translateZ(0);
    backface-visibility: hidden;
    will-change: width;
  }
  
  .cd-resize-img img {
    position: absolute;
    left: 0;
    top: 0;
    display: block;
    height: 100%;
    width: auto;
    max-width: none;
  }
  
  .cd-resize-img .cd-image-label {
    right: auto;
    left: 0;
  }
  
  .cd-handle {
    position: absolute;
    height: 44px;
    width: 44px;
    left: 50%;
    top: 50%;
    margin-left: -22px;
    margin-top: -22px;
    border-radius: 50%;
    background: #dc717d;
    cursor: ew-resize;
    box-shadow: 0 0 0 6px rgba(0, 0, 0, 0.2), 0 0 10px rgba(0, 0, 0, 0.6), inset 0 1px 0 rgba(255, 255, 255, 0.3);
    opacity: 1;
    transform: translate3d(0, 0, 0) scale(1);
    z-index: 10;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.1s, opacity 0.1s, background-color 0.2s;
  }
  
  .cd-handle::before,
  .cd-handle::after {
    content: '';
    position: absolute;
    width: 12px;
    height: 2px;
    background: white;
  }
  
  .cd-handle::before {
    transform: rotate(45deg);
    left: 12px;
  }
  
  .cd-handle::after {
    transform: rotate(-45deg);
    right: 12px;
  }
  
  .cd-handle.draggable {
    background-color: #445b7c;
  }
</style>

<div class="image-comparison-slider">
  <figure class="cd-image-container is-visible">
    <img src="{{ section.settings.before_image | img_url: '1000x' }}" alt="Before image" loading="lazy"/>
    <span class="cd-image-label" data-type="original">Before</span>

    <div class="cd-resize-img">
      <img src="{{ section.settings.after_image | img_url: '1000x' }}" alt="After image" loading="lazy"/>
      <span class="cd-image-label" data-type="modified">After</span>
    </div>

    <span class="cd-handle"></span>
  </figure>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Initialize all image comparison sliders on the page
  const containers = document.querySelectorAll('.cd-image-container');
  
  containers.forEach(container => {
    initImageComparison(container);
  });
});

function initImageComparison(container) {
  const handle = container.querySelector('.cd-handle');
  const resizeImg = container.querySelector('.cd-resize-img');
  const originalLabel = container.querySelector('.cd-image-label[data-type="original"]');
  const modifiedLabel = container.querySelector('.cd-image-label[data-type="modified"]');
  
  // Make the container interactive immediately
  container.classList.add('is-visible');
  
  // Initialize labels
  updateLabel(modifiedLabel, resizeImg, 'left');
  updateLabel(originalLabel, resizeImg, 'right');
  
  // Set up touch and mouse events
  setupDragEvents(handle, resizeImg, container, originalLabel, modifiedLabel);
  
  // Set initial position
  resizeImg.style.width = '50%';
  handle.style.left = '50%';
}

function setupDragEvents(handle, resizeElement, container, originalLabel, modifiedLabel) {
  let isDragging = false;
  let startX, startWidth, containerWidth, containerLeft;
  
  // Mouse events
  handle.addEventListener('mousedown', startDrag);
  document.addEventListener('mousemove', drag);
  document.addEventListener('mouseup', stopDrag);
  
  // Touch events
  handle.addEventListener('touchstart', startDrag, { passive: false });
  document.addEventListener('touchmove', drag, { passive: false });
  document.addEventListener('touchend', stopDrag);
  
  function startDrag(e) {
    isDragging = true;
    
    // Get initial positions
    const clientX = e.clientX || e.touches[0].clientX;
    const containerRect = container.getBoundingClientRect();
    
    startX = clientX;
    startWidth = parseInt(window.getComputedStyle(resizeElement).width, 10);
    containerWidth = containerRect.width;
    containerLeft = containerRect.left;
    
    // Add active classes
    handle.classList.add('draggable');
    resizeElement.classList.add('resizable');
    
    // Prevent text selection during drag
    e.preventDefault();
  }
  
  function drag(e) {
    if (!isDragging) return;
    
    const clientX = e.clientX || e.touches[0].clientX;
    const deltaX = clientX - startX;
    let newWidth = startWidth + deltaX;
    
    // Constrain to container
    newWidth = Math.max(0, Math.min(newWidth, containerWidth));
    
    // Calculate percentage
    const percent = (newWidth / containerWidth) * 100;
    
    // Update positions
    resizeElement.style.width = `${percent}%`;
    handle.style.left = `${percent}%`;
    
    // Update labels
    updateLabel(modifiedLabel, resizeElement, 'left');
    updateLabel(originalLabel, resizeElement, 'right');
    
    // Prevent scrolling and text selection during drag
    e.preventDefault();
  }
  
  function stopDrag() {
    if (!isDragging) return;
    isDragging = false;
    
    // Remove active classes
    handle.classList.remove('draggable');
    resizeElement.classList.remove('resizable');
  }
}

function updateLabel(label, resizeElement, position) {
  if (!label || !resizeElement) return;
  
  const labelRect = label.getBoundingClientRect();
  const resizeRect = resizeElement.getBoundingClientRect();
  
  if (position === 'left') {
    (labelRect.left + labelRect.width < resizeRect.left + resizeRect.width) 
      ? label.classList.remove('is-hidden')
      : label.classList.add('is-hidden');
  } else {
    (labelRect.left > resizeRect.left + resizeRect.width)
      ? label.classList.remove('is-hidden')
      : label.classList.add('is-hidden');
  }
}
</script>

{% schema %}
{
  "name": "Image Comparison Slider",
  "settings": [
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before Image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After Image"
    }
  ],
  "presets": [
    {
      "name": "Image Comparison Slider",
      "category": "Media"
    }
  ]
}
{% endschema %}